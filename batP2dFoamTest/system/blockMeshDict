/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1e-6;

anodeL 80;
separatorL 24;
anodesepL 104;
cathodeL 64;
// fullL #calc "$anodeL+$separatorL+$cathodeL";
fullL 168;

vertices
(
    (0 0 0)
    ($anodeL 0 0)
    ($anodeL 1 0)
    (0 1 0)
    (0 0 1)
    ($anodeL 0 1)
    ($anodeL 1 1)
    (0 1 1)
    
 //   ($anodeL 0 0)  // 8 >>1
    ($anodesepL 0 0) /// 9 >>8
    ($anodesepL 1 0) /// 10 >>9
 //   ($anodeL 1 0) //11 >>2 
//    ($anodeL 0 1) //12 >>5
    ($anodesepL 0 1) /// 13 >>10
    ($anodesepL 1 1) /// 14 >>11
 //   ($anodeL 1 1) //15 >>6
    
//    ($anodesepL 0 0) // 16>>9>>8
    ($fullL 0 0) /// 17 >>12
    ($fullL 1 0) /// 18 >> 13
//    ($anodesepL 1 0) //19>>10>>9
//    ($anodesepL 0 1) //20>>13>>10
    ($fullL 0 1) /// 21 >>14
    ($fullL 1 1) /// 22 >>15 
 //   ($anodesepL 1 1) //23>>14>>11
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (40 1 1) simpleGrading (1 1 1)
    hex (1 8 9 2 5 10 11 6) (12 1 1) simpleGrading (1 1 1)
    hex (8 12 13 9 10 14 15 11) (32 1 1) simpleGrading (1 1 1)    
);

edges
(
);

boundary
(
    frontAndBack
    {
        type empty;
        faces
        (
            (3 7 6 2)
            (1 5 4 0)
            (2 6 11 9)
            (8 10 5 1)   
            (9 11 15 13)
            (12 14 10 8)                     
        );
    }

    leftLet
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    

    
    rightLet
    {
        type patch;
        faces
        (
            (13 15 14 12)
        );
    }
    
    topAndBottom
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
            (1 2 9 8)
            (5 10 11 6)
            (8 9 13 12)
            (10 14 15 11)
        );
    }
);

mergePatchPairs
(

);

// ************************************************************************* //
